package com.interviewbit.binarysearch;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class BitonicArraySearch {

	public static void main(String[] args) {
		//List<Integer> asList = Arrays.asList(3, 9, 10, 20, 17, 5, 1);//20
		//List<Integer> asList = Arrays.asList(5, 6, 7, 8, 9, 10, 3, 2, 1);//30
		//List<Integer> asList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11 );//12
		//List<Integer> asList = Arrays.asList(1, 20, 50, 40, 10 );//5
		List<Integer> asList = Arrays.asList(656044047, 19755121, 130372532, 808814605, 600902607, 277126753, 781443998, 411272745, 285188465, 775238376, 932578597, 304685200, 947232174, 673134922, 100402784, 792166364, 546775842, 295308553, 837710250, 271239205, 408095819, 676433970, 325530769, 604578370, 961831316, 712635252, 980658845, 448984385, 82663929, 101929032, 411534116, 959214627, 110921991, 930645156, 931732609, 494408081, 795038822, 783081495, 236500496, 989002916, 351183870, 773747033, 862811671, 495437601, 213027624, 295384961, 799013184, 540638090, 948539707, 916837943, 126843823, 195368019, 656484893, 202730426, 142139612, 906608135, 556299391, 698311910, 244870215, 360744737, 51189633, 912499130, 528082002, 404229461, 107013319, 668028457, 970591826, 726772144, 795416261, 808911784, 761810690, 747327282, 787445069, 315968813, 244418506, 392439334, 447115563, 473701619, 389540960, 400568659, 123585798, 619257650, 399869791, 453167658, 758325189, 188345349, 12320862, 359135503, 744600863, 342267887, 756509922, 627995096, 758784026, 711858669, 439484193, 170836396, 989665432, 248558964, 469402914, 329905186, 686927288, 336481759, 983905283, 439298690, 805826638, 996205968, 661068065, 937328648, 811050422, 200829101, 989518578, 103267260, 2023496, 962880441, 87831902, 743460805, 856295747, 612315200, 249591384, 167535997, 625652690, 312394685, 436569224, 764389462, 922721096, 900057583, 434542598, 771663979, 283809793, 481051841, 190439426, 60312912, 553558522, 284995739, 975118277, 359870524, 593682962, 31994543, 950284912, 33304044, 926094292, 477534200, 288723365, 633399543, 655682191, 167738795, 816117382, 351194180, 921532918, 861892736, 277679365, 504282635, 51773885, 989465675, 326609797, 628605424, 410478006, 270910923, 399680741, 737016055, 30409648, 938952838, 498583971, 890967267, 359056978, 663953863, 523065788, 725735753, 668811935, 180953872, 380509278, 153631335, 462909945, 235255867, 329352708, 205772418, 918735200, 633682095, 80802310, 666111003, 287950700, 580957740, 475449838, 58748173, 353174536, 713957034, 174279490, 334984605, 441603176, 347445437, 588480583, 327202242, 317507322, 793233432, 374129999, 431140377, 320200977, 526019289, 845409248, 201336344, 826618260, 583584144, 148592036, 622448374, 437899581, 362642279, 796066309, 11771845, 34834192, 367198396, 900269042, 897560924, 285160134, 674793836, 628809671, 734608427, 892631712, 923398626, 115533944, 174675515, 488270987, 922241908, 712259043, 378129234, 104926081, 785737064, 716222756, 491641605, 166210595, 712899474, 884207408, 299016744, 310923005, 604955891, 480657549, 117294014, 8507558, 337561147, 236558045, 308601782, 501278528, 27648822, 675680832, 906195059, 778584530, 301709419, 64486745, 140033863, 110481434, 152210310, 780011437, 780648984, 183986685, 809757358, 544237904, 234183149, 973368257, 104120396, 282355055, 451285816, 307139739, 510414574, 122220671, 903429993, 252322731, 638968084, 330883706, 680771546, 89594746, 320020146, 38460674, 426915161, 277443239, 734353266, 924511884, 936507464, 904869924, 98862941, 279133444, 530747499, 340305118, 755174016, 25351467, 996626017, 876930845, 398012139, 141289724, 518089713, 123087729, 344138683, 708546938, 464292497, 799572214, 923675633, 592265049, 320653659, 908799509, 865520766, 820916381, 23318109, 649175756, 776315186, 898588891, 329532399, 609606177, 606803832, 41370275, 443918939, 877209131, 604251636, 347698027, 381409281, 550887911, 828102105, 999553569, 245058664, 560046729, 554010132, 289733949, 934807306, 359626941, 139438724, 339378014, 617484367, 627912391, 398210043, 838871824, 749062633, 830719897, 84211665, 730174952, 76548606, 393705930, 779896894, 30188253, 638861363, 123749126, 37882735, 994172248, 233733786, 527780005, 35171234, 604207618, 571300891, 690295859, 201938012, 110019029, 166758077, 194694187, 183419062, 628537311, 554014510, 236026558, 151247862, 928063215, 567352335, 914145040, 462871777, 956012630, 221550205, 931603708, 640490269, 878508150, 261947240, 343311843, 393301740, 962094510, 578253739, 964074816, 344654890, 55879506, 899490647, 811514986, 500149984, 248757685, 723644484, 878848246, 412810194, 156097754, 942464179, 189540511, 12067638, 323974125, 66438643, 658629043, 797783026, 541548975, 697289571, 51540120, 615197045, 26542855, 488825063, 78443002, 322121113, 263355470, 537845227, 954258338, 373834909, 844292018, 401335951, 561169522, 94632680, 171092797, 30236963, 364734287, 203281046, 995155401, 625261459, 296876077, 420797967, 749727929, 93118186, 644989700, 430015246, 149217269, 721791555, 582150254, 127104593, 925392191, 833965147, 225350682, 979683900, 819233428, 732204108, 870583344, 819570166, 503661366, 149833033, 113900747, 705728242, 481198033, 536521558, 276390963, 531572236, 688396223, 572677282, 864117386, 103478496, 790853488, 894636232, 887617982, 724684426, 981702677, 591949429, 103722075, 618455940, 80862235, 888280804, 659450532, 398428580, 414795678, 95109405, 91862154, 855598807, 665668461, 625902370, 509457742, 518399224, 243038451, 70634321, 572443560, 101503550, 886298756, 795620407, 352024764, 765228205, 784560514, 344798117, 600827001, 740430738, 588697910, 681321110, 415370285, 486044309, 13041092, 727101554, 267068655, 735675279, 614463321, 740808038, 44886369, 164157991, 417122327, 847575671, 574104644, 5608377, 747570507, 65024801, 658759607, 544905593, 252298608, 474071555, 589042358, 462865595, 670027339, 286526879, 44299359, 476642860, 153348294, 555275729, 145924456);//5
		System.out.println(solve2(asList));
		solve2(asList);
	}

	public static int solve(List<Integer> A, int B) {
		int len = A.size();
		int low = 0;
		int high = len - 1;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (B == A.get(mid))
				return mid;
			else if (B > A.get(mid)) {
				if (mid+1<len && A.get(mid + 1) > A.get(mid))
					low = mid + 1;
				else
					high = mid - 1;
			} else {// B<A.get(mid)
				if (mid+1<len && A.get(mid + 1) > A.get(mid))
					high = mid - 1;
				else
					low = mid + 1;
			}
		}
		return -1;
	}
	public static int solve2(List<Integer> A) {
		List<Integer> sorted = new ArrayList<>(A);
		Collections.sort(sorted);
		if(A.equals(sorted))
			return A.size();
		
		Collections.reverse(sorted);
		if(A.equals(sorted))
			return A.size();
		
		int cnt=1;
		int lastMaxCnt=0;
		boolean increase=true;
		for (int i = 0; i < A.size()-1; i++) {
			if(!increase && A.get(i)<A.get(i+1)) {
				if(cnt>lastMaxCnt)
					lastMaxCnt=cnt;
				cnt=1;
				increase=true;
			}else if(increase && A.get(i)>A.get(i+1)) {
				increase=false;
				cnt++;
			}else if(A.get(i)<A.get(i+1))
				cnt++;
			else if(A.get(i)>A.get(i+1)) {
				cnt++;
			}
		}
		if(cnt>lastMaxCnt)
			lastMaxCnt=cnt;
		return lastMaxCnt+1;
	}

}
